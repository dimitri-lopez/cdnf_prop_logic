#+title: CDNF Converter for Propositional Logic

* Overview
I have created a slighlty buggy propositional logic expression converter to CDNF
form talked about in class. See this
[[./references/systems_of_equivalence.pdf][[document]] for the details on CDNF
form. It converts an expression into NNF -> DNF -> CDNF where CDNF is DNF but
adjacency is applied to every possiblel term and is then sorted. In the end, one
can read off all the rows in a truth-table that evaluate to =TRUE= where each
term in CDNF corresponds to a row.

It is quite easy to implement this by creating the truth table (trivial for a
computer) and then literally reading off the rows that evaulate to =TRUE=.
Instead I went ahead and implemented a bunch of propositional logic "algebra"
that converts an expression into CDNF. While I could have done the truth table
method in around 50 lines of code (if I let Aris do all the parsing for me) I
added a custom parser so that arbitrary strings can be entered from the command
line and all algebra rules. The result is something like the following:

[[./.org_imgs/README.org_20220430_220739_57nndU.png]]


In total I spent around 20 or so hours on this project and wrote around 700
lines of code (200 for parsing, 400 for algebra rules, 100 for CDNF algorithm).
The algebra rules that I implemented are much more general than the ones that
Aris uses hence why this does not output a set of algebra steps in Aris.

In the future it would be cool to have these steps be used within Aris. Instead
of adding the menial steps of LOTS of association steps, it might be better to
generalize some of the Aris rules (Extended Cognition project for this summer?)
and then convert the text here into the proper format.

CDNF is primarily used to explore the equivalence of two expressions by simply
seeing if two expressions have the same CDNF. I never got around to doing this.
It can be another way that this can be built upoin in the future.

There are likely quite a few bugs in this piece of code. I got at least a few
cases to work...

** Original Project Idea
From Bram:

#+begin_quote
Automated Equivalence Prover: Implement the algorithm we discussed in class that
was used to demonstrate that any two equivalent statements in propositional
logic can be transformed into each other using basic equivalence principles.
Make output in .bram format so it can be loaded and displayed in Aris - Dimitri
#+end_quote

** Code Requirements
- Python 3.10.2 (might work in older versions)
- tabulate package (~pip install tabulate~)

** Running the Code
1. Download the repository.
2. From the top level directory run:
   : python src/main.py sample_input/example1.txt
3. Feel free to create your own sample inputs and replace the "example1.txt"
   with the appropriate file names. I find this to be a bit easier since I get
   nervous when writing things directly from the command line.


