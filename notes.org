#+title: Notes
#+STARTUP: lognoteclock-out

For Dimitri. A bunch of notes and some time logging. The time logging only
lasted so long...

* Resources
- [[./references/systems_of_equivalence.pdf][Algorithm Explanation from Bram]]
- [[./references/final_project_ideas.pdf][Final Project Ideas]]
- [[./references/conditional_logic_equivalences_references.pdf][Table of Equivalence Rules]]
- [[./references/propositional_logic_equivalences.pdf][Slide Deck describing normal forms]]
* TODO Plan
** DONE Understand the algorithm at hand
:LOGBOOK:
CLOCK: [2022-04-21 Thu 13:33]--[2022-04-21 Thu 14:20] =>  0:47
- Understanding the algorithm at hand
:END:

We are essentially just creating a truth table with a special ordering and then
creating the CDNF from that.
** DONE Research .bram file
:LOGBOOK:
CLOCK: [2022-04-21 Thu 14:21]--[2022-04-21 Thu 14:45] =>  0:24
- Gonna start with input from the command line and then do the actual algorithm
:END:
** DONE Decide on representation of things that will be needed
:LOGBOOK:
CLOCK: [2022-04-21 Thu 14:46]--[2022-04-21 Thu 14:57] =>  0:11
- Gonna use a binary tree
:END:
** DONE Parse an input file
:LOGBOOK:
CLOCK: [2022-04-21 Thu 16:14]--[2022-04-21 Thu 17:24] =>  1:10
- Got most of the parsing done. Just gotta write a few linera probes and throw
  things into the proper data structure.
CLOCK: [2022-04-21 Thu 23:17]--[2022-04-22 Fri 01:13]  =>  1:56
- Working on the parser... I think I have things finished. I just need to flesh
  out the bugs and then turn it into the proper data structure.
:END:
** TODO Generate the proper representation
:LOGBOOK:
CLOCK: [2022-04-23 Sat 21:10]--[2022-04-23 Sat 22:16] =>  1:06
- Printing the expression and sorting the tree. This should make some of the
  algebra rules a bit easier.
CLOCK: [2022-04-23 Sat 20:32]--[2022-04-23 Sat 21:09] =>  0:37
- Finished building the tree structure
CLOCK: [2022-04-22 Fri 21:33]--[2022-04-22 Fri 21:45] =>  0:12
- Implementing the tree structure that is needed.
:END:
** TODO Algebraic operations on the tree
:LOGBOOK:
CLOCK: [2022-04-24 Sun 00:18]--[2022-04-24 Sun 00:40] =>  0:22
- Working through the algebra rules. It feels like distribution is gonna be kinda
  hard. Hopefully it won't be too bad though. Do I even need it? I can't remember.
CLOCK: [2022-04-23 Sat 22:17]--[2022-04-23 Sat 22:38] =>  0:21
- Did a little bit of note taking on what needs to be done. There are a lot more
  of these little operations than I was expecting. It is gonna take a while but I
  might be able to finish in another 4 hours or so?
:END:
** TODO Generate CDNF using table, output yes / no
** TODO Generate CDNF using prop equivalence rules
** TODO Create a .bram file
* Notes
** Overview of Algorithm
We are following the algorithm described by Bram in
[[./references/systems_of_equivalence.pdf]] to show that two statements are
equivalent. We convert two sentences into CDNF(A, B) which is the Disjunctive
Normal Form (DNF) of A and B except that using the algorithm on hand we have
some standardized form of it.

In particular see page 4.

1. Gather the atomic sentences occuring in A and B
2. This yields us a set of atomic sentences. If there is no atomic sentences then
   we either have a tautology or a contradiction.
3. Create a truth table. Let the reference columns be the atomic sentences on
   hand.
4. Sort the reference columns / atomic sentences by some defined order. We are
   aiming for consistency here.
5. Work out the truth-conditions for A.
6. For every true row, conjunct all the literals together giving us a statement.
   If there are no true rows, then we have a contradiction.
7. Disjunct all of these statements together.
8. This yields us CDNF(A, B). Now check if CDNF(A, B) = CDNF(B, A). This
   reflects if A <==> B.
** DNF via Algebra
*** Simplify Tautologies and Contradictions as much as possible
*** Use Complement
*** Statements in NNF by repeated DeMorgan and Double Negation
*** Statements in DNF by repeated applications of Distribution of AND over OR
*** Use adjacency to add terms?
*** Use Commutation to order conjuncts
*** Use Idempotence to eliminate duplicate conjuncts
*** Use Complement and Annihilation to replace sentences with tautologies and contradictions
***

** Ideas
- Converting to DNF can definitely be done by applying algebraic operations
  - I think this may be faster than the truth table method.
  - Complexity analysis of both algorithms will need to be done.
- Complexity analysis of table method
  - The size of the table is exponential with the number of unique atomic
    literals.
** .bram Format
- https://github.com/Bram-Hub/Bram-File-Format
- An XML based format
** User Input
Gonna take things in from the command line at the start. Gonna work with
everything in the plain text format.

*** Symbols
| Operators | Plain Text Format | Special Character |
|-----------+-------------------+-------------------|
| AND       | &                 | ∧                 |
| OR        | \vert             | ∨                 |
| NOT       | ~                 | ¬                 |


- AND & ∧
- OR | ∨
- NOT ~ ¬
** Data representation
We are going to represent things as a tree. Both the AND and the OR operator are
binary operators that act on two sentences. This makes me want to use binary tree.


*** TODO How do we represent unary operators?
*** TODO Find the atomic literals that we have
*** TODO Parantheses matching
*** TODO Create data structure
